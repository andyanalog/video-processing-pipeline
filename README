# Video Processing Pipeline - Base de Datos

---

## DESCRIPCI√ìN DEL PROYECTO

El **Video Processing Pipeline** es un sistema de base de datos dise√±ado para automatizar y gestionar la transcodificaci√≥n de archivos multimedia a gran escala. 

El sistema permite:
- Recibir videos en diversos formatos
- Procesarlos seg√∫n diferentes perfiles de calidad
- Generar m√∫ltiples versiones optimizadas para distintos dispositivos y plataformas de streaming
- Gestionar clientes, usuarios, proyectos y cuotas de almacenamiento
- Mantener auditor√≠a completa de todas las operaciones
- Notificar eventos relevantes autom√°ticamente

**Tipo de organizaci√≥n objetivo**: Plataformas de streaming (Netflix, YouTube, HBO Max, Disney+, Amazon Prime Video), productoras de contenido multimedia, agencias de publicidad, estudios de animaci√≥n.

---

## OBJETIVO

Dise√±ar e implementar una base de datos relacional que permita:

 **Gesti√≥n de clientes y usuarios** - Sistema multiusuario con roles y permisos  
 **Gesti√≥n de proyectos** - Organizaci√≥n de archivos por proyectos y clientes  
 **Gesti√≥n de archivos fuente** - Almacenar metadatos de videos en m√∫ltiples ubicaciones  
 **Control de trabajos de codificaci√≥n** - Administrar cola de procesamiento con prioridades  
 **Seguimiento de calidad** - Registrar m√©tricas (PSNR, SSIM, VMAF)  
 **Monitoreo de recursos** - Controlar utilizaci√≥n de servidores de procesamiento  
 **Trazabilidad completa** - Desde archivo original hasta versiones finales  
 **Auditor√≠a** - Registro de todas las acciones realizadas  
 **Notificaciones** - Alertas autom√°ticas sobre eventos importantes  

---

## SITUACI√ìN PROBLEM√ÅTICA

### Necesidad del Negocio

Las empresas de streaming y producci√≥n multimedia enfrentan desaf√≠os al procesar grandes vol√∫menes de video:

**Problemas sin sistema estructurado:**
- P√©rdida de trazabilidad en el procesamiento
- Duplicaci√≥n de trabajo por falta de control de estado
- Ineficiencia en asignaci√≥n de recursos computacionales
- Dificultad para medir calidad y rendimiento
- Falta de visibilidad en tiempos de procesamiento
- Ausencia de control sobre cuotas y facturaci√≥n
- Imposibilidad de auditar acciones

### Soluci√≥n Propuesta

La base de datos implementada permite:
- Centralizar informaci√≥n del pipeline de procesamiento
- Automatizar gesti√≥n de colas con prioridades
- Proporcionar m√©tricas detalladas de calidad
- Optimizar utilizaci√≥n de recursos
- Gestionar clientes, proyectos y cuotas
- Mantener auditor√≠a completa
- Notificar eventos relevantes autom√°ticamente

---

## MODELO DE NEGOCIO

### Tipos de Usuarios

| Rol | Descripci√≥n | Responsabilidades |
|-----|-------------|-------------------|
| **Admin** | Administrador del sistema | Configuraci√≥n global, gesti√≥n de workers, supervisi√≥n |
| **Encoder** | Operador de codificaci√≥n | Crear y gestionar trabajos, configurar perfiles |
| **Analyst** | Analista de calidad | Revisar m√©tricas, generar reportes de rendimiento |
| **Client** | Cliente del servicio | Subir archivos, crear proyectos, monitorear cuota |
| **Viewer** | Usuario de solo lectura | Consultar estado de trabajos y m√©tricas |

### Flujo de Trabajo

```
1. Registro de Cliente ‚Üí Cliente se registra con suscripci√≥n
2. Creaci√≥n de Proyecto ‚Üí Cliente crea proyectos para organizar archivos
3. Ingesta ‚Üí Archivos se cargan y analizan autom√°ticamente
4. Encolado ‚Üí Se crean trabajos de codificaci√≥n seg√∫n perfiles
5. Asignaci√≥n ‚Üí Sistema asigna trabajos a workers disponibles
6. Procesamiento ‚Üí Workers procesan videos usando FFmpeg
7. An√°lisis ‚Üí Se calculan m√©tricas de calidad (PSNR, SSIM, VMAF)
8. Notificaci√≥n ‚Üí Usuarios reciben alertas sobre trabajos
9. Distribuci√≥n ‚Üí Archivos procesados listos para distribuci√≥n
10. Auditor√≠a ‚Üí Todas las acciones registradas
```

### Modelo de Suscripci√≥n

| Tier | Cuota Mensual | Caracter√≠sticas |
|------|---------------|-----------------|
| **Basic** | 100-500 GB | Productoras peque√±as e independientes |
| **Professional** | 500-2000 GB | Empresas medianas con necesidades regulares |
| **Enterprise** | 3000-5000 GB | Grandes plataformas de streaming |


---

## LISTADO DE TABLAS

### Resumen General

El sistema cuenta con **15 tablas** que cumplen todos los requisitos:

| # | Tabla | Tipo | Registros | Descripci√≥n |
|---|-------|------|-----------|-------------|
| 1 | users | Dimensi√≥n | 10 | Usuarios del sistema |
| 2 | clients | Dimensi√≥n | 6 | Clientes/Empresas |
| 3 | projects | Dimensi√≥n | 8 | Proyectos de video |
| 4 | storage_locations | Dimensi√≥n | 6 | Ubicaciones de almacenamiento |
| 5 | source_files | **Transaccional** | 15 | Archivos de video originales |
| 6 | encoding_profiles | Dimensi√≥n | 12 | Perfiles de codificaci√≥n |
| 7 | processing_workers | Dimensi√≥n | 10 | Servidores de procesamiento |
| 8 | encoding_jobs | **Transaccional** | 18 | Trabajos de codificaci√≥n |
| 9 | transcoded_outputs | Dimensi√≥n | 11 | Archivos transcodificados |
| 10 | quality_metrics | **Hechos** | 11 | M√©tricas de calidad |
| 11 | ffmpeg_commands | Dimensi√≥n | 11 | Comandos FFmpeg ejecutados |
| 12 | processing_errors | Dimensi√≥n | 3 | Errores de procesamiento |
| 13 | codec_performance | **Hechos** | 25 | Benchmarks de rendimiento |
| 14 | audit_logs | Transaccional | 12 | Registro de auditor√≠a |
| 15 | notifications | Transaccional | 14 | Notificaciones a usuarios |

### Descripci√≥n Detallada de Tablas

#### üîπ TABLA 1: USERS
**Prop√≥sito:** Gestiona los usuarios que interact√∫an con el sistema.

| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| user_id | INT (PK) | Identificador √∫nico |
| username | VARCHAR(100) UNIQUE | Nombre de usuario |
| email | VARCHAR(255) UNIQUE | Correo electr√≥nico |
| full_name | VARCHAR(255) | Nombre completo |
| password_hash | VARCHAR(255) | Contrase√±a encriptada |
| user_role | ENUM | Rol: admin, encoder, analyst, client, viewer |
| is_active | BOOLEAN | Usuario activo |
| last_login | TIMESTAMP | √öltimo inicio de sesi√≥n |
| created_at, updated_at | TIMESTAMP | Fechas de auditor√≠a |

---

#### üîπ TABLA 2: CLIENTS
**Prop√≥sito:** Administra empresas/organizaciones que usan el servicio.

| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| client_id | INT (PK) | Identificador √∫nico |
| client_name | VARCHAR(255) | Nombre del cliente |
| company_name | VARCHAR(255) | Nombre de la empresa |
| subscription_tier | ENUM | Tipo: basic, professional, enterprise |
| monthly_quota_gb | INT | Cuota mensual en GB |
| used_quota_gb | DECIMAL(10,2) | Cuota utilizada |
| account_manager_id | INT (FK‚Üíusers) | Account manager asignado |
| contract_start_date | DATE | Inicio de contrato |
| contract_end_date | DATE | Fin de contrato |
| is_active | BOOLEAN | Cliente activo |

---

#### üîπ TABLA 3: PROJECTS
**Prop√≥sito:** Agrupa archivos de video organizados por cliente.

| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| project_id | INT (PK) | Identificador √∫nico |
| project_name | VARCHAR(255) | Nombre del proyecto |
| project_code | VARCHAR(50) UNIQUE | C√≥digo √∫nico del proyecto |
| client_id | INT (FK‚Üíclients) | Cliente propietario |
| project_status | ENUM | Estado: active, on_hold, completed, cancelled |
| priority_level | TINYINT | Prioridad (1-10) |
| budget_allocated | DECIMAL(12,2) | Presupuesto asignado |
| budget_spent | DECIMAL(12,2) | Presupuesto gastado |
| created_by_user_id | INT (FK‚Üíusers) | Usuario creador |

---

#### üîπ TABLA 4: STORAGE_LOCATIONS
**Prop√≥sito:** Gestiona ubicaciones de almacenamiento (cloud y local).

| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| location_id | INT (PK) | Identificador √∫nico |
| location_name | VARCHAR(100) UNIQUE | Nombre de ubicaci√≥n |
| location_type | ENUM | Tipo: local, s3, azure, gcp, nas |
| base_path | VARCHAR(500) | Ruta base |
| total_capacity_gb | BIGINT | Capacidad total |
| used_capacity_gb | DECIMAL(12,2) | Capacidad usada |
| is_default | BOOLEAN | Ubicaci√≥n por defecto |

---

#### üîπ TABLA 5: SOURCE_FILES ‚≠ê TRANSACCIONAL
**Prop√≥sito:** Almacena informaci√≥n de archivos de video originales.

| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| source_file_id | BIGINT (PK) | Identificador √∫nico |
| filename | VARCHAR(255) | Nombre del archivo |
| file_path | VARCHAR(500) UNIQUE | Ruta del archivo |
| file_size_bytes | BIGINT | Tama√±o en bytes |
| duration_seconds | DECIMAL(10,3) | Duraci√≥n del video |
| checksum_md5 | CHAR(32) UNIQUE | Hash MD5 |
| original_codec | VARCHAR(50) | C√≥dec original |
| original_resolution | VARCHAR(20) | Resoluci√≥n original |
| original_bitrate | BIGINT | Bitrate original |
| **client_id** | **INT (FK‚Üíclients)** | **Cliente propietario** |
| **project_id** | **INT (FK‚Üíprojects)** | **Proyecto asociado** |
| **uploaded_by_user_id** | **INT (FK‚Üíusers)** | **Usuario que subi√≥** |
| **storage_location_id** | **INT (FK‚Üístorage_locations)** | **Ubicaci√≥n almacenamiento** |

---

#### üîπ TABLA 6: ENCODING_PROFILES
**Prop√≥sito:** Define perfiles de codificaci√≥n disponibles.

| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| profile_id | INT (PK) | Identificador √∫nico |
| profile_name | VARCHAR(100) UNIQUE | Nombre del perfil |
| target_codec | VARCHAR(50) | C√≥dec destino |
| target_resolution | VARCHAR(20) | Resoluci√≥n objetivo |
| target_bitrate | BIGINT | Bitrate objetivo |
| quality_setting | DECIMAL(4,2) | Configuraci√≥n calidad (CRF) |
| ffmpeg_preset | VARCHAR(20) | Preset FFmpeg |
| is_active | BOOLEAN | Perfil activo |

---

#### üîπ TABLA 7: PROCESSING_WORKERS
**Prop√≥sito:** Servidores disponibles para procesamiento de video.

| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| worker_id | INT (PK) | Identificador √∫nico |
| worker_name | VARCHAR(100) UNIQUE | Nombre del worker |
| cpu_cores | TINYINT | N√∫cleos CPU |
| ram_gb | SMALLINT | Memoria RAM en GB |
| gpu_model | VARCHAR(100) | Modelo de GPU |
| max_concurrent_jobs | TINYINT | M√°ximo trabajos concurrentes |
| current_load | TINYINT | Carga actual |
| worker_status | ENUM | Estado: active, maintenance, offline |
| worker_type | ENUM | Tipo: cpu, gpu, hybrid |
| supported_codecs | JSON | C√≥decs soportados |

**Constraint:** `current_load <= max_concurrent_jobs`

---

#### üîπ TABLA 8: ENCODING_JOBS ‚≠ê TRANSACCIONAL
**Prop√≥sito:** Tabla central que gestiona trabajos de codificaci√≥n.

| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| job_id | BIGINT (PK) | Identificador √∫nico |
| source_file_id | BIGINT (FK‚Üísource_files) | Archivo fuente |
| profile_id | INT (FK‚Üíencoding_profiles) | Perfil de codificaci√≥n |
| worker_id | INT (FK‚Üíprocessing_workers) | Worker asignado |
| job_priority | TINYINT | Prioridad (1-10) |
| job_status | ENUM | Estado: queued, processing, completed, failed, cancelled |
| queued_timestamp | TIMESTAMP | Momento encolado |
| started_timestamp | TIMESTAMP | Momento inicio |
| completed_timestamp | TIMESTAMP | Momento finalizaci√≥n |
| actual_duration | INT | Duraci√≥n real (segundos) |
| retry_count | TINYINT | N√∫mero de reintentos |
| progress_percentage | DECIMAL(5,2) | Porcentaje progreso |
| **created_by_user_id** | **INT (FK‚Üíusers)** | **Usuario creador** |

**Constraint:** `retry_count <= max_retries`

---

#### üîπ TABLA 9: TRANSCODED_OUTPUTS
**Prop√≥sito:** Archivos generados tras la codificaci√≥n.

| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| output_id | BIGINT (PK) | Identificador √∫nico |
| job_id | BIGINT (FK‚Üíencoding_jobs) | Trabajo asociado |
| output_filename | VARCHAR(255) | Nombre archivo generado |
| output_path | VARCHAR(500) UNIQUE | Ruta del archivo |
| output_size_bytes | BIGINT | Tama√±o en bytes |
| actual_bitrate | BIGINT | Bitrate real alcanzado |
| encoding_time_seconds | INT | Tiempo de codificaci√≥n |
| compression_ratio | DECIMAL(8,4) | Ratio de compresi√≥n |
| output_checksum | CHAR(32) UNIQUE | Hash MD5 del output |

---

#### üîπ TABLA 10: QUALITY_METRICS ‚≠ê TABLA DE HECHOS
**Prop√≥sito:** M√©tricas de calidad calculadas para cada video.

| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| metric_id | BIGINT (PK) | Identificador √∫nico |
| output_id | BIGINT (FK‚Üítranscoded_outputs) | Salida asociada |
| psnr_value | DECIMAL(6,3) | PSNR - Peak Signal-to-Noise Ratio |
| ssim_value | DECIMAL(6,4) | SSIM - Structural Similarity Index (0-1) |
| vmaf_score | DECIMAL(6,3) | VMAF - Video Multimethod Assessment (0-100) |
| visual_quality_score | DECIMAL(5,2) | Calidad visual (0-10) |
| audio_quality_score | DECIMAL(5,2) | Calidad audio (0-10) |
| analysis_timestamp | TIMESTAMP | Momento del an√°lisis |

**Notas sobre m√©tricas:**
- **PSNR**: Valores t√≠picos 30-50 dB (mayor es mejor)
- **SSIM**: 0-1, donde 1 es id√©ntico al original
- **VMAF**: 0-100, m√©trica desarrollada por Netflix

---

#### üîπ TABLA 11: FFMPEG_COMMANDS
**Prop√≥sito:** Comandos FFmpeg ejecutados para cada trabajo.

| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| command_id | BIGINT (PK) | Identificador √∫nico |
| job_id | BIGINT (FK‚Üíencoding_jobs) UNIQUE | Trabajo asociado |
| full_command_string | TEXT | Comando completo ejecutado |
| input_filters | JSON | Filtros de entrada |
| video_filters | JSON | Filtros de video |
| hardware_acceleration | VARCHAR(50) | Aceleraci√≥n hardware usada |

---

#### üîπ TABLA 12: PROCESSING_ERRORS
**Prop√≥sito:** Registro de errores durante procesamiento.

| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| error_id | BIGINT (PK) | Identificador √∫nico |
| job_id | BIGINT (FK‚Üíencoding_jobs) | Trabajo afectado |
| error_code | VARCHAR(50) | C√≥digo de error |
| error_message | TEXT | Mensaje de error |
| error_timestamp | TIMESTAMP | Momento del error |
| recovery_action | VARCHAR(100) | Acci√≥n de recuperaci√≥n |
| is_resolved | BOOLEAN | Error resuelto |

---

#### üîπ TABLA 13: CODEC_PERFORMANCE ‚≠ê TABLA DE HECHOS
**Prop√≥sito:** M√©tricas de rendimiento de c√≥decs en workers.

| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| performance_id | BIGINT (PK) | Identificador √∫nico |
| codec_name | VARCHAR(50) | Nombre del c√≥dec |
| worker_id | INT (FK‚Üíprocessing_workers) | Worker ejecutor |
| encoding_speed_fps | DECIMAL(8,3) | Velocidad codificaci√≥n (FPS) |
| cpu_utilization | DECIMAL(5,2) | Utilizaci√≥n CPU (%) |
| gpu_utilization | DECIMAL(5,2) | Utilizaci√≥n GPU (%) |
| benchmark_date | TIMESTAMP | Fecha del benchmark |

---

#### üîπ TABLA 14: AUDIT_LOGS ‚≠ê TRANSACCIONAL
**Prop√≥sito:** Trazabilidad completa de acciones en el sistema.

| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| log_id | BIGINT (PK) | Identificador √∫nico |
| user_id | INT (FK‚Üíusers) | Usuario que realiz√≥ acci√≥n |
| action_type | ENUM | Tipo: create, update, delete, login, upload, etc. |
| table_name | VARCHAR(100) | Tabla afectada |
| record_id | BIGINT | ID del registro afectado |
| old_values | JSON | Valores anteriores |
| new_values | JSON | Valores nuevos |
| ip_address | VARCHAR(45) | Direcci√≥n IP |
| action_timestamp | TIMESTAMP | Momento de la acci√≥n |

---

#### üîπ TABLA 15: NOTIFICATIONS ‚≠ê TRANSACCIONAL
**Prop√≥sito:** Sistema de notificaciones para eventos relevantes.

| Campo | Tipo | Descripci√≥n |
|-------|------|-------------|
| notification_id | BIGINT (PK) | Identificador √∫nico |
| user_id | INT (FK‚Üíusers) | Usuario destinatario |
| notification_type | ENUM | Tipo: job_completed, job_failed, quota_warning, etc. |
| title | VARCHAR(255) | T√≠tulo notificaci√≥n |
| message | TEXT | Mensaje completo |
| related_job_id | BIGINT (FK‚Üíencoding_jobs) | Trabajo relacionado |
| priority | ENUM | Prioridad: low, medium, high, critical |
| is_read | BOOLEAN | Notificaci√≥n le√≠da |
| notification_timestamp | TIMESTAMP | Momento de creaci√≥n |

---

## OBJETOS DE BASE DE DATOS

### Resumen de Objetos Creados

| Tipo | Cantidad |
|------|----------|
| **Vistas** | 5 |
| **Funciones** | 3 |
| **Stored Procedures** | 3 |
| **Triggers** | 4 |

---

### VISTAS (VIEWS)

#### VISTA 1: VW_DASHBOARD_TRABAJOS_ACTIVOS
**Objetivo:** Vista consolidada de trabajos en procesamiento para monitoreo en tiempo real.

**Tablas involucradas:** encoding_jobs, source_files, encoding_profiles, processing_workers, clients, projects

**Campos principales:**
- Estado del trabajo y progreso
- Informaci√≥n del archivo origen
- Perfil de codificaci√≥n aplicado
- Worker asignado
- Cliente y proyecto asociados

**Ejemplo de uso:**
```sql
SELECT * FROM vw_dashboard_trabajos_activos;
SELECT * FROM vw_dashboard_trabajos_activos WHERE cliente = 'Netflix Originals';
```

---

#### VISTA 2: VW_METRICAS_CALIDAD_COMPLETAS
**Objetivo:** Consolidar m√©tricas de calidad con informaci√≥n contextual para an√°lisis comparativo.

**Tablas involucradas:** quality_metrics, transcoded_outputs, encoding_jobs, source_files, encoding_profiles, clients, projects

**Campos principales:**
- M√©tricas PSNR, SSIM, VMAF
- Comparaci√≥n original vs transcodificado
- Ratio de compresi√≥n y eficiencia
- **Categor√≠a de calidad autom√°tica:**
  - VMAF ‚â• 95: **Excelente**
  - VMAF ‚â• 85: **Muy Buena**
  - VMAF ‚â• 70: **Buena**
  - VMAF ‚â• 50: **Aceptable**
  - VMAF < 50: **Baja**

**Ejemplo de uso:**
```sql
SELECT * FROM vw_metricas_calidad_completas WHERE categoria_calidad = 'Excelente';
```

---

#### VISTA 3: VW_RENDIMIENTO_WORKERS
**Objetivo:** Analizar rendimiento y utilizaci√≥n de cada worker.

**Tablas involucradas:** processing_workers, encoding_jobs, transcoded_outputs

**Campos principales:**
- Especificaciones del worker (CPU, RAM, GPU)
- Total trabajos procesados
- Tasa de √©xito/fallo
- Tiempos promedio de codificaci√≥n
- Estado de disponibilidad

**Ejemplo de uso:**
```sql
SELECT * FROM vw_rendimiento_workers ORDER BY tasa_exito_porcentaje DESC;
```

---

#### VISTA 4: VW_HISTORIAL_ERRORES_RECIENTES
**Objetivo:** Monitorear errores recientes para identificar patrones.

**Tablas involucradas:** processing_errors, encoding_jobs, source_files, processing_workers

**Descripci√≥n:** Muestra errores de los √∫ltimos 30 d√≠as con informaci√≥n contextual.

**Ejemplo de uso:**
```sql
SELECT * FROM vw_historial_errores_recientes WHERE resuelto = FALSE;
```

---

#### VISTA 5: VW_DASHBOARD_CLIENTES ‚≠ê NUEVA
**Objetivo:** Vista consolidada de actividad y uso por cliente para gesti√≥n de cuentas.

**Tablas involucradas:** clients, users, projects, source_files, encoding_jobs, transcoded_outputs, quality_metrics

**Campos principales:**
- Informaci√≥n del cliente y suscripci√≥n
- Account manager asignado
- Control de cuota mensual (GB usados vs disponibles)
- Estad√≠sticas de proyectos y archivos
- Trabajos procesados (completados, fallidos, activos)
- M√©tricas de calidad promedio
- **Estado de cuenta con alertas autom√°ticas:**
  - `"Alerta: Cuota casi agotada"` (‚â•90% usado)
  - `"Advertencia: 75% de cuota usada"` (‚â•75% usado)
  - `"Renovaci√≥n pr√≥xima"` (‚â§30 d√≠as para vencimiento)
  - `"Normal"` (sin alertas)

**Ejemplo de uso:**
```sql
SELECT * FROM vw_dashboard_clientes WHERE estado_cuenta LIKE '%Alerta%';
SELECT nombre_cliente, porcentaje_cuota_usada, trabajos_completados 
FROM vw_dashboard_clientes 
ORDER BY porcentaje_cuota_usada DESC;
```

---

### FUNCIONES (FUNCTIONS)

#### FUNCI√ìN 1: FN_CALCULAR_EFICIENCIA_COMPRESION
**Retorna:** DECIMAL(5,2) - Porcentaje de reducci√≥n de tama√±o

**Par√°metro:** `p_job_id` (BIGINT)

**Descripci√≥n:** Calcula el porcentaje de reducci√≥n de tama√±o tras la compresi√≥n.

**F√≥rmula:** `((tama√±o_original - tama√±o_comprimido) / tama√±o_original) * 100`

**Ejemplo:**
```sql
SELECT job_id, fn_calcular_eficiencia_compresion(job_id) AS eficiencia_porcentaje
FROM encoding_jobs WHERE job_status = 'completed' LIMIT 10;
```

---

#### FUNCI√ìN 2: FN_OBTENER_TIEMPO_ESPERA_ESTIMADO
**Retorna:** INT - Minutos estimados de espera

**Par√°metro:** `p_prioridad` (TINYINT 1-10)

**Descripci√≥n:** Estima tiempo de espera para trabajos en cola seg√∫n prioridad.

**L√≥gica:**
1. Cuenta trabajos en cola con prioridad >= especificada
2. Obtiene capacidad total de workers activos
3. Calcula tiempo promedio (√∫ltimos 7 d√≠as)
4. Estima: `(trabajos_adelante * tiempo_promedio) / (capacidad_total * 60)`

**Ejemplo:**
```sql
SELECT fn_obtener_tiempo_espera_estimado(8) AS minutos_espera_prioridad_8;
```

---

#### FUNCI√ìN 3: FN_VERIFICAR_DISPONIBILIDAD_WORKER
**Retorna:** TINYINT - 1 (disponible) o 0 (no disponible)

**Par√°metro:** `p_worker_id` (INT)

**Descripci√≥n:** Verifica si un worker est√° disponible para nuevos trabajos.

**Criterios:** Estado='active' AND carga_actual < max_jobs

**Ejemplo:**
```sql
SELECT worker_id, worker_name, fn_verificar_disponibilidad_worker(worker_id) AS disponible
FROM processing_workers;
```

---

### STORED PROCEDURES

#### PROCEDIMIENTO 1: SP_ASIGNAR_TRABAJO_A_WORKER
**Par√°metro:** `p_job_id` (BIGINT)

**Objetivo:** Asignar autom√°ticamente un trabajo al worker m√°s apropiado.

**Criterios de selecci√≥n:**
1. Estado activo
2. Capacidad disponible
3. Soporte del c√≥dec requerido
4. Mayor capacidad disponible
5. Mayor n√∫mero de CPU cores

**Tablas afectadas:**
- encoding_jobs (UPDATE)
- processing_workers (UPDATE - incrementa current_load)

**Ejemplo:**
```sql
CALL sp_asignar_trabajo_a_worker(13);
-- Salida: "Trabajo 13 asignado exitosamente al worker 5"
```

---

#### PROCEDIMIENTO 2: SP_REPORTE_RENDIMIENTO_PERIODO
**Par√°metros:** `p_fecha_inicio` (DATETIME), `p_fecha_fin` (DATETIME)

**Objetivo:** Generar reporte completo de rendimiento del sistema.

**Retorna 4 conjuntos de resultados:**
1. **RESUMEN_TRABAJOS** - Total, completados, fallidos, tasa de √©xito
2. **METRICAS_CALIDAD** - Promedios de VMAF, PSNR, SSIM
3. **RENDIMIENTO_POR_PERFIL** - Estad√≠sticas por perfil de codificaci√≥n
4. **TOP_WORKERS** - Top 5 workers m√°s productivos

**Ejemplo:**
```sql
CALL sp_reporte_rendimiento_periodo('2025-01-01 00:00:00', '2025-10-17 23:59:59');
```

---

#### PROCEDIMIENTO 3: SP_REINTENTAR_TRABAJOS_FALLIDOS
**Par√°metro:** `p_horas_limite` (INT)

**Objetivo:** Reintentar autom√°ticamente trabajos fallidos elegibles.

**Acciones:**
- Cambia status a 'queued'
- Limpia worker_id
- Incrementa retry_count
- Resetea progress_percentage a 0
- Solo procesa si retry_count < max_retries

**Ejemplo:**
```sql
CALL sp_reintentar_trabajos_fallidos(48);
-- Salida: "Se reintentar√°n 2 trabajos fallidos"
```

---

### TRIGGERS

#### TRIGGER 1: TRG_VALIDAR_WORKER_ANTES_ASIGNACION
**Tipo:** BEFORE UPDATE  
**Tabla:** encoding_jobs

**Objetivo:** Validar que el worker asignado est√© activo y tenga capacidad.

**Validaciones:**
- Worker tiene estado 'active'
- Worker tiene capacidad (current_load < max_concurrent_jobs)

**Acci√≥n:** Genera error (SQLSTATE '45000') si falla validaci√≥n.

---

#### TRIGGER 2: TRG_ACTUALIZAR_CARGA_WORKER_COMPLETADO
**Tipo:** AFTER UPDATE  
**Tabla:** encoding_jobs

**Objetivo:** Decrementar carga del worker cuando trabajo finaliza.

**Condici√≥n:** Trabajo pasa de 'processing' a estado final (completed, failed, cancelled)

**Acci√≥n:** Decrementa current_load del worker en 1.

---

#### TRIGGER 3: TRG_REGISTRAR_ERROR_TRABAJO_FALLIDO
**Tipo:** AFTER UPDATE  
**Tabla:** encoding_jobs

**Objetivo:** Registrar autom√°ticamente error cuando trabajo falla.

**Acci√≥n:** Crea registro en processing_errors con:
- error_code, error_message
- recovery_action seg√∫n retry_count
- is_resolved = FALSE

---

#### TRIGGER 4: TRG_VALIDAR_METRICAS_CALIDAD
**Tipo:** BEFORE INSERT  
**Tabla:** quality_metrics

**Objetivo:** Validar m√©tricas dentro de rangos v√°lidos.

**Validaciones:**
- PSNR: 0-100
- SSIM: 0-1
- VMAF: 0-100

**Acci√≥n:** Genera error si valores fuera de rango.

---

## SCRIPTS DE INSTALACI√ìN

### Orden de Ejecuci√≥n

Los scripts deben ejecutarse en el siguiente orden:

```
1. 01_video_processing_pipeline.sql
   ‚úì Crea la base de datos
   ‚úì Crea las 15 tablas en orden correcto
   ‚úì Crea √≠ndices de optimizaci√≥n

2. 02_vistas_funciones_sp_triggers.sql
   ‚úì Crea 5 vistas
   ‚úì Crea 3 funciones
   ‚úì Crea 3 stored procedures
   ‚úì Crea 4 triggers

3. 03_insercion_datos.sql
   ‚úì Inserta datos de prueba en las 15 tablas
   ‚úì Incluye consultas de verificaci√≥n
   ‚úì Incluye ejemplos de uso
```
---

## HERRAMIENTAS Y TECNOLOG√çAS

### Base de Datos
- **MySQL 8.0+** - Sistema de gesti√≥n de base de datos relacional
- **MySQL Workbench** - Herramienta visual para dise√±o y administraci√≥n

### Caracter√≠sticas Utilizadas
- **Foreign Keys** - Integridad referencial entre tablas
- **Constraints** - CHECK, UNIQUE para validaci√≥n
- **Indexes** - Optimizaci√≥n de consultas
- **JSON** - Almacenamiento de metadatos flexibles
- **ENUM** - Tipos de datos enumerados
- **Triggers** - Automatizaci√≥n de reglas de negocio
- **Stored Procedures** - L√≥gica de negocio en servidor
- **Views** - Vistas para reporting

### Herramientas Externas Integradas
- **FFmpeg** - Motor de transcodificaci√≥n de video
- **VMAF** - M√©trica de calidad de video (Netflix)
- **AWS S3, Azure Blob, Google Cloud Storage** - Almacenamiento cloud

### Glosario de T√©rminos T√©cnicos

**T√©rminos de Video:**
- **Bitrate:** Cantidad de datos por unidad de tiempo (bits/segundo)
- **Codec:** Algoritmo de compresi√≥n/descompresi√≥n (H.264, H.265, VP9)
- **CRF:** Constant Rate Factor - calidad constante
- **FFmpeg:** Suite de software para manipulaci√≥n multimedia
- **FPS:** Frames Per Second - cuadros por segundo
- **Transcodificaci√≥n:** Convertir video de un formato a otro

**M√©tricas de Calidad:**
- **PSNR:** Peak Signal-to-Noise Ratio (30-50 dB t√≠pico)
- **SSIM:** Structural Similarity Index (0-1, 1=id√©ntico)
- **VMAF:** Video Multimethod Assessment Fusion (0-100, Netflix)

---

## CASOS DE USO

### Caso 1: Netflix Sube Nuevo Contenido
1. Usuario Netflix inicia sesi√≥n (client role)
2. Crea proyecto "Stranger Things Season 6"
3. Sube archivo 4K original (15 GB)
4. Sistema registra en source_files con client_id=1
5. Crea 5 trabajos de codificaci√≥n (4K, Full HD, HD, SD, Mobile)
6. SP_ASIGNAR_TRABAJO_A_WORKER asigna a workers
7. Workers procesan archivos
8. Sistema calcula m√©tricas VMAF, PSNR, SSIM
9. Notificaciones enviadas cuando completa
10. Audit log registra todas las acciones

### Caso 2: Cliente Excede Cuota
1. Cliente procesa archivos regularmente
2. Sistema actualiza used_quota_gb
3. VW_DASHBOARD_CLIENTES detecta 91% usado
4. Estado_cuenta = "Alerta: Cuota casi agotada"
5. Notificaci√≥n autom√°tica a cliente y account manager
6. Cliente actualiza plan de 'professional' a 'enterprise'
7. monthly_quota_gb incrementa de 2000 GB a 4000 GB

### Caso 3: Trabajo Falla y Se Reintenta
1. Trabajo #25 falla con "MEMORY_ERROR"
2. TRG_REGISTRAR_ERROR_TRABAJO_FALLIDO crea registro
3. Notificaci√≥n enviada al encoder
4. Admin ejecuta SP_REINTENTAR_TRABAJOS_FALLIDOS(24)
5. Trabajo se reencola (retry_count = 1)
6. Worker con m√°s memoria procesa exitosamente
7. Error marcado como resolved